$(document).ready(Sunburst());

function Sunburst() {
  var data1 = <%= @test_json_1 %>;
  var data2 = <%= @test_json_2 %>;
  var datasets = {
    data1: function() { return data1; },
    data2: function() { return data2; }
  };

  var root = data1;

  var width = 960,
    height = 700,
    radius = Math.min(width, height) / 2 - 20;

  var x = d3.scale.linear()
    .range([0, 2 * Math.PI]);

  var y = d3.scale.sqrt()
    .range([0, radius]);

  var color = ['#B01CEE', '#1CC3EE', '#1CEEB0', '#F6A110', '#EE1C5A'];

  var svg = d3.select(".data-vis").append("svg")
    .attr("width", width)
    .attr("height", height)
    .append("g")
    .attr("transform", "translate(" + width / 2 + "," + (height / 2 + 10) + ")");

  var partition = d3.layout.partition()
    .sort(null)
    .value(function(d) { return 1; });

  var arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)); });

  // Keep track of the node that is currently being displayed as the root.

  var node = root;
  var path = svg.selectAll("path")
    .data(partition.nodes(root))
    .enter().append("path")
    .attr("opacity", function(d) { return d.depth ? 1 : 0; })
    .attr("d", arc)
    .style("fill", function(d) { return color[(d.children ? d : d.parent).index % color.length ]; })
    .on("click", click)
    .each(stash);

  path.append("svg:title").text(function(d) { return d.id ? d.name : "cluster"; });

  function changeScaling(sizing) {
    var value = sizing  === 'count'
      ? function() { return 1; }
    : function(d) { return d.size; };

    path
      .data(partition.value(value).nodes(root))
      .transition()
      .duration(1000)
      .attrTween("d", arcTweenData);
  };

  isChanging = false;

  function changeData(dataset) {
    if (!isChanging) {

      isChanging = true;
      timing = 150;

      path
        .transition()
        .duration(timing)
        .attr("opacity", 0)
        .remove();

      root = dataset;
      node = root;

      setTimeout(function() {
        path = svg.selectAll("path")
          .data(partition.nodes(root))
          .enter().append("path")
          .attr("opacity", 0)
          .attr("d", arc)
          .style("fill", function(d) { return color[(d.children ? d : d.parent).index % color.length ]; })
          .on("click", click)
          .each(stash);

        path.append("svg:title").text(function(d) { return d.id ? d.name : "cluster"; });

        path
          .transition()
          .duration(timing)
          .attr("opacity", function(d) { return d.depth ? 1 : 0; })

        isChanging = false;
      }, timing + 50);
    }

  };

  $('select.scale').on('input', function (e) { changeScaling(e.currentTarget.selectedOptions[0].dataset.slice); });

  $('select.data').on('input', function (e) { changeData(datasets[e.currentTarget.selectedOptions[0].dataset.data]()); });


  function click(d) {
    node = d;
    path.transition()
      .duration(1000)
      .attrTween("d", arcTweenZoom(d));
  }

  d3.select(self.frameElement).style("height", height + "px");

  // Setup for switching data: stash the old values for transition.
  function stash(d) {
    d.x0 = d.x;
    d.dx0 = d.dx;
  }

  // When switching data: interpolate the arcs in data space.
  function arcTweenData(a, i) {
    var oi = d3.interpolate({x: a.x0, dx: a.dx0}, a);
    function tween(t) {
      var b = oi(t);
      a.x0 = b.x;
      a.dx0 = b.dx;
      return arc(b);
    }
    if (i == 0) {
      // If we are on the first arc, adjust the x domain to match the root node
      // at the current zoom level. (We only need to do this once.)
      var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]);
      return function(t) {
        x.domain(xd(t));
        return tween(t);
      };
    } else {
      return tween;
    }
  }

  // When zooming: interpolate the scales.
  function arcTweenZoom(d) {
    var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
    yd = d3.interpolate(y.domain(), [d.y, 1]),
    yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
    return function(d, i) {
      return i
        ? function(t) { return arc(d); }
      : function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); return arc(d); };
    };
  }

  function arcTweenUpdate(a) {
    var i = d3.interpolate({x: this.x0, dx: this.dx0}, a);
    return function(t) {
      var b = i(t);
      this.x0 = b.x;
      this.dx0 = b.dx;
      return arc(b);
    };
  }

}
